package admin

import (
	"fmt"
	"richetechguy/internal/game"
	"richetechguy/internal/types"
)

templ Dashboard(gm *game.GameManager) {
	@AdminLayout("Admin Dashboard") {
		<div class="p-6">
			<h1 class="text-3xl font-bold mb-6">Game Admin Dashboard</h1>
			<!-- Game Controls -->
			<div class="bg-white rounded-lg shadow p-6 mb-6">
				<h2 class="text-xl font-semibold mb-4">Game Controls</h2>
				<div class="flex gap-4">
					<button
						hx-post="/admin/game/create"
						hx-target="#gameStatus"
						class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
					>
						Create New Game
					</button>
					<button
						hx-post="/admin/game/start"
						id="startButton"
						hx-target="#gameStatus"
						hx-vals='{"gameID": ""}'
						class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
					>
						Start Game
					</button>
					<button
						hx-post="/admin/game/end"
						id="endButton"
						hx-target="#gameStatus"
						hx-vals='{"gameID": ""}'
						class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
					>
						End Game
					</button>
					<button
						hx-post="/admin/game/clear"
						hx-target="#gameStatus"
						class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
					>
						Clear All Games
					</button>
					<select
						id="gameIDSelect"
						name="gameID"
						hx-post="/admin/game/select"
						hx-target="#gameStatus"
						hx-trigger="change[this.value!='default']"
						class="bg-gray-50 p-2 rounded"
					>
						<option value="default">Select a game to join</option>
						for id, val := range gm.Games {
							if id == gm.GetFirstGameID() {
								<option value={ id } selected?={ true }>Game { val.Name }</option>
							} else {
								<option value={ id }>Game { val.Name }</option>
							}
						}
					</select>
				</div>
			</div>
			<!-- Game Status -->
			<div id="gameStatus" class="bg-white rounded-lg shadow p-6 mb-6">
				<h2 class="text-xl font-semibold mb-4">Current Game Status</h2>
				<div id="currentGame">
					<!-- Will be updated via HTMX -->
				</div>
				<div id="playerList" class="mt-4">
					<h3 class="text-lg font-semibold mb-2">Connected Players</h3>
					<!-- Will be updated via WebSocket -->
				</div>
			</div>
			<!-- Question Management -->
			<div class="bg-white rounded-lg shadow p-6">
				<h2 class="text-xl font-semibold mb-4">Question Management</h2>
				<form hx-post="/admin/questions/add" hx-target="#questionList" class="space-y-4">
					<div>
						<label class="block mb-2">Question Text</label>
						<input type="text" name="questionText" required class="w-full p-2 border rounded"/>
					</div>
					<div class="grid grid-cols-2 gap-4">
						<div>
							<label class="block mb-2">Option 1</label>
							<input type="text" name="option1" required class="w-full p-2 border rounded"/>
						</div>
						<div>
							<label class="block mb-2">Option 2</label>
							<input type="text" name="option2" required class="w-full p-2 border rounded"/>
						</div>
						<div>
							<label class="block mb-2">Option 3</label>
							<input type="text" name="option3" required class="w-full p-2 border rounded"/>
						</div>
						<div>
							<label class="block mb-2">Option 4</label>
							<input type="text" name="option4" required class="w-full p-2 border rounded"/>
						</div>
					</div>
					<div>
						<label class="block mb-2">Correct Answer (1-4)</label>
						<input
							type="number"
							name="correctAnswer"
							min="1"
							max="4"
							required
							class="w-full p-2 border rounded"
						/>
					</div>
					<button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white p-2 rounded">
						Add Question
					</button>
				</form>
				<div id="questionList" class="mt-6">
					@QuestionList([]types.Question{})
				</div>
			</div>
		</div>
	}
}

// Add these new components for game status updates
templ GameStatus(game *types.GameState) {
	if game == nil {
		<div class="text-gray-500">No active game</div>
	} else {
		<div class="space-y-2">
			<div>
				<span class="font-semibold">Game ID:</span>
				<span>{ game.ID }</span>
			</div>
			<div>
				<span class="font-semibold">Status:</span>
				<span class={ templ.KV("text-green-500", game.IsActive), templ.KV("text-red-500", !game.IsActive) }>
					if game.IsActive {
						Active
					} else {
						Waiting to Start
					}
				</span>
			</div>
			<div>
				<span class="font-semibold">Current Round:</span>
				<span>{ fmt.Sprint(game.Round) }</span>
			</div>
			if game.IsActive {
				<div>
					<span class="font-semibold">Players:</span>
					<span>{ fmt.Sprint(len(game.Players)) }</span>
				</div>
				<div id="playerList" class="mt-4">
					@PlayerList(game.Players, game.ID)
				</div>
			}
		</div>
	}
}

templ PlayerList(players map[string]*types.Player, gameID string) {
	<div class="bg-white rounded-lg shadow p-4">
		<button
			hx-post="/admin/game/startQuestions"
			id="startButton"
			hx-target="#questionStatus"
			hx-vals={ `{"gameID": "` + gameID + `" }` }
			class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
		>
			Start Game
		</button>
		<div class="mb-4 flex justify-between items-center">
			<h3 class="text-lg font-semibold">Connected Players ({ fmt.Sprint(len(players)) })</h3>
			<div id="questionStatus"></div>
			<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Live</span>
		</div>
		if len(players) == 0 {
			<div class="text-gray-500 text-center py-4">
				<p>No players connected</p>
				<p class="text-sm">Waiting for players to join...</p>
			</div>
		} else {
			<div class="space-y-2">
				for _, player := range players {
					<div
						class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
					>
						<div class="flex items-center space-x-3">
							<div
								class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold"
							>
								{ string([]rune(player.Name)[0]) }
							</div>
							<div>
								<p class="font-medium">{ player.Name }</p>
								<p class="text-sm text-gray-500">ID: { player.ID }</p>
							</div>
						</div>
						<div class="flex items-center space-x-4">
							<div class="text-right">
								<p class="text-sm font-medium">Score</p>
								<p class="text-lg font-bold text-blue-600">
									{ fmt.Sprint(player.Score) }
								</p>
							</div>
							<div class="flex flex-col items-center text-xs text-gray-500">
								<span class="w-2 h-2 bg-green-500 rounded-full mb-1"></span>
								Connected
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}
